---
title: Tutorial | Typewriter | Docs | uiloos
layout: layouts/docs.njk
permalink: /docs/typewriter/tutorial/
renderData:
  parent: 'typewriter'
  current: 'typewriter-tutorial'
  description: "Tutorial which teaches you how to create a flash message center using the ViewChannel from uiloos"
  keywords: "ViewChannel tutorial, ViewChannel flash message tutorial"
---

<article>
  <h1>ViewChannel flash message tutorial</h1>

  <nav class="2xl:fixed 2xl:top-24 2xl:right-2 2xl:w-[270px]" role="doc-toc">
    <em>Table of contents</em>
    <ol class="list-decimal m-2 mb-4">
       <li class="ml-8">
        <a href="#introduction" class="text-purple-600 underline">Introduction</a>
      </li>
      <li class="ml-8">
        <a href="#files-overview" class="text-purple-600 underline">Files overview</a>
      </li>
      <li class="ml-8">
        <a href="#goals" class="text-purple-600 underline">Goals</a>
      </li>
      <li class="ml-8">
        <a href="#instantiating" class="text-purple-600 underline">Instantiating</a>
      </li>
      <li class="ml-8">
        <a href="#presenting" class="text-purple-600 underline">Presenting</a>
      </li>
      <li class="ml-8">
        <a href="#dismissing" class="text-purple-600 underline">Dismissing</a>
      </li>
      <li class="ml-8">
        <a href="#types" class="text-purple-600 underline">Message types</a>
      </li>
      <li class="ml-8">
        <a href="#priority" class="text-purple-600 underline">Priority</a>
      </li>
      <li class="ml-8">
        <a href="#autodismiss" class="text-purple-600 underline">AutoDismiss</a>
      </li>
      <li class="ml-8">
        <a href="#animation" class="text-purple-600 underline">Exit animation</a>
      </li>
      <li class="ml-8">
        <a href="#playpause" class="text-purple-600 underline">Play & pause</a>
      </li>
      <li class="ml-8">
        <a href="#what-you-have-learned" class="text-purple-600 underline">What you have learned</a>
      </li>
      <li class="ml-8">
        <a href="#further-reading" class="text-purple-600 underline">Further reading</a>
      </li>
    </ol>
  </nav>

  <h2 id="introduction" ><a href="#introduction">1. Introduction</a></h2>

  <p>
    We are going to build a flash message system in vanilla JavaScript.
    The flash message demonstrates the all capabilities of the  
    <a href="/api/core/viewchannel/" class="underline high">ViewChannel</a>
    quite nicely.
  </p>

   <p class="note">
    We we are using vanilla JavaScript which requires us to
    write our own DOM manipulation inside of a subscriber. When using
    a reactive framework such as Svelte or Vue, this is not necessary,
    as these frameworks handle synchronizing with the DOM for us.
    See <a class="underline" href="/docs/view-channel/usage-with-frameworks/">Usage with Frameworks</a>
    for more information.
  </p>

  <p>
    To get started with the tutorial open and fork this 
    <a target="_blank" rel="noopener noreferrer" href="https://codesandbox.io/s/viewchannel-tutorial-c9gm55" class="underline text-purple-600">sandbox</a>.
    By using the sandbox you do not have to worry to much about setting
    up an entire development environment.
  </p>

  <h2 id="files-overview" ><a href="#files-overview">2. Files overview</a></h2>

  <p>
    In the sandbox you will see a couple of files:
  </p>

  <ol class="list-disc m-2 mb-4">
    <li class="ml-8 mb-4">
      <span class="high">flash-message.css</span> it contains all styling, and the animations
      for the flash messages.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">index.html</span> contains the HTML with an example flash message,
      and buttons, which do nothing now, but which will trigger flash messages at 
      the end of this tutorial.

      Finally it also includes "uiloos" from the UNPKG cdn.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">flash-message.js</span> an empty file in which we will
      write the code needed to create and display flash messages.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">main.js</span> this file contains the (empty for now) 
      event handlers for the trigger buttons.
    </li>
  </ol>

  <h2 id="goals" ><a href="#goals">3. Goals</a></h2>

  <p>
    We want our flash messages to have the following behaviors:
  </p>

  <ol class="list-decimal m-2 mb-4">
    <li class="ml-8 mb-4">
      They should leave after a certain amount of time. We will call this
      auto dismissal.
    </li>
    <li class="ml-8 mb-4">
      They should pause the auto dismissal when the user hovers over
      the flash message so the user has more time to read the message.
    </li>
    <li class="ml-8 mb-4">
      The flash message should when clicked be removed, so the user
      can manually remove a flash message.
    </li>
    <li class="ml-8">
      The flash messages should have a concept of priority, high
      priority messages should always be displayed first.
    </li>
  </ol>

  <h2 id="instantiating" ><a href="#instantiating">4. Instantiating</a></h2>

  <p>
    The first step is to instantiate the ViewChannel in the flash-messages.js file:
  </p>

{% highlight "js" %}

/* 
  Because we use the UNPKG variant the ViewChannel 
  module is available under the "uiloosViewChannel" 
  variable.
*/
export const flashMessageChannel = new window.uiloosViewChannel.ViewChannel(
  {},
  subscriber
);

function subscriber(viewChannel, event) {
  // Leaving the subscriber empty for now
}
{% endhighlight %}

  <p>
    The idea of the <span class="high">flashMessageChannel</span> is that
    it will contain all the flash messages. It is recommended to create 
    a <a href="/api/core/viewchannel/" class="underline high">ViewChannel</a>
    for each type of view your application / website will have. 
  </p>

  <p>
    For example: you might have a channel for modals, a channel for flash messages 
    and a channel for confirmation dialogs in your application.
  </p>

  <h2 id="presenting" ><a href="#presenting">5. Presenting</a></h2>

  <p>
    Lets first alter the subscriber function so it responds to the "PRESENT"
    event.
  </p>

{% highlight "js" %}
function subscriber(viewChannel, event) {
  if (event.type === 'PRESENTED') {
    console.log(event.view.data);
  }
}
{% endhighlight %}

  <p>
    Now in <span class="high">main.js</span> import the <span class="high">flashMessageChannel</span>
    and change the on click event of the <span class="high">flashInfo</span> button:
  </p>

{% highlight "js" %}
import { flashMessageChannel } from '/scripts/flash-message.js';

document.getElementById('flashInfo').onclick = () => {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text: 'Info flash message',
      type: 'info'
    },
  });
};
{% endhighlight %}
  
  <p>
    By calling <a href="/api/core/viewchannel/#present" class="underline high">present()</a> we 
    tell the <a href="/api/core/viewchannel" class="underline high">ViewChannel</a> that a new
    view has been added, and needs to be displayed.
  </p>

  <p>
    <a href="/api/core/viewchannel/#present" class="underline high">present()</a> accepts an object
    as the first parameter, in which you can set a 
    <a href="/api/core/viewchannelviewconfig/#data" class="underline high">data</a> key. The
    "data" can contain any value you want, as the ViewChannel leaves it alone.
  </p>

  <p>
    This allow you to pass any information you would like. In the case of the flash message
    we pass in the "text" of the message, a unique id, and the type of flash message
    it is.
  </p>

  <p>
    The <span class="high">flashMessageChannel</span> does nothing apart from  
    logging the <a href="/api/core/viewchannelview/" class="underline high">ViewChannelView</a> when the event
    is <span class="high">"PRESENT"</span>
  </p>
  
  <p>
    Lets remedy that situation, but first remove the "dummy" flash message
    inside of the <span class="high">index.html</span> by removing
    the following code:
  </p>

{% highlight "js" %}
<div class="flash-message flash-message-info">
  <div class="flash-message-row">
    <div class="flash-message-content">
      <span class="flash-message-icon">‚ìò</span>
      <p>Example flash message</p>
    </div>
    <span class="flash-message-close">êÑÇ</span>
  </div>

  <div
    class="flash-message-progress flash-message-progress-info"
  ></div>
</div>
{% endhighlight %}

  <p>
    In order to show the flash message, we need to insert the DOM we
    just removed from the <span class="high">index.html</span> on 
    each <span class="high">"PRESENTED"</span> event:
  </p>

{% highlight "js" %}
if (event.type === 'PRESENTED') {
  // Extract the view from the event for easier access.
  const view = event.view;

  // I like to give the data a meaningfull name.
  const flashMessage = view.data;

  // Create a div with the generated ID.
  const flashMessageEl = document.createElement('div');
  flashMessageEl.id = flashMessage.id;

  // Set the CSS classes of the div.
  flashMessageEl.className 
    = 'flash-message flash-message-info';

  // Set the inner HTML using backticks for easier templating. 
  // Note however that for security reasons because 
  // we use innerHTML the `flashMessage.text` should never
  // come from a user directly!
  flashMessageEl.innerHTML = `
    <div class="flash-message-row">
      <div class="flash-message-content">
        <span class="flash-message-icon">
          ‚ìò
        </span>
        <p>${flashMessage.text}</p>
      </div>
      <span class="flash-message-close">êÑÇ</span>
    </div>

    <div id="${flashMessage.id}-progress" class="flash-message-progress flash-message-progress-info"></div>
  '`;

  // Append the flash message to make it visible.
  flashMessagesContainerEl.append(flashMessageEl);

  return;
}
{% endhighlight %}

  <h2 id="dismissing" ><a href="#dismissing">6. Dismissing</a></h2>

  <p>
    To be able to dismiss the flash message we need to first handle
    the <span class="high">"DISMISSED"</span> event:
  </p>

{% highlight "js" %}
function subscriber(viewChannel, event) {
  if (event.type === 'PRESENTED') {
    // Truncated but same as before.
    return;
  }

  if (event.type === 'DISMISSED') {
    const view = event.view;
    const flashMessage = view.data;

    // Get the flash messages div and remove it.
    const flashMessageEl = document
      .getElementById(flashMessage.id);
    flashMessageEl.remove();

    return;
  } 
}
{% endhighlight %}

  <p>
    Now we can add an <span class="high">onclick</span> event to the 
    flash message div before appending it, in the subscriber when handling 
    the <span class="high">"PRESENTED"</span> event:
  </p>

{% highlight "js" %}
flashMessageEl.onclick = () => view.dismiss();

// Append the flash message to make it visible.
flashMessagesContainerEl.append(flashMessageEl);
{% endhighlight %}

  <p>
    If you click on the flash message it should be removed now.
  </p>

  <h2 id="types" ><a href="#types">7. Message types</a></h2>
  
  <p>
    Flash messages usually have different colors for different types of messages. 
    Red for an error message, yellow for a warning, blue for an info message
    and green for a success message.
  </p>

  <p>
    To get the colors working we need to add different CSS classes for 
    based on the type of flash message:
  </p>

{% highlight "js" %}
flashMessageEl.className = `
  flash-message flash-message-${flashMessage.type}
`;

flashMessageEl.innerHTML = `
  <div class="flash-message-row">
    <div class="flash-message-content">
      <span class="flash-message-icon">
        ‚ìò
      </span>
      <p>${flashMessage.text}</p>
    </div>
    <span class="flash-message-close">êÑÇ</span>
  </div>

  <div 
    id="${flashMessage.id}-progress" 
    class="
      flash-message-progress 
      flash-message-progress-${flashMessage.type}
    "
  ></div>
`;
{% endhighlight %}

  <p>
    One thing we advise you do is create wrapper functions in order to hide the
    <a href="/api/core/viewchannel" class="underline high">ViewChannel</a>.
  </p>

  <p>
    Add the following functions in the <span class="high">flash-message.js</span>
    file:
  </p>
  
{% highlight "js" %}
export function infoFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'info'
    },
    priority: 4
  });
}

export function warningFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'warning'
    },
    priority: 1
  });
}

export function errorFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'error'
    },
    priority: 0,
  });
}

export function successFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'success'
    },
    priority: 2
  });
}
{% endhighlight %}

  <p>
    Now change the <span class="high">main.js</span> file to this:
  </p>

{% highlight "js" %}
import {
  infoFlashMessage,
  successFlashMessage,
  warningFlashMessage,
  errorFlashMessage
} from '/scripts/flash-message.js';

document.getElementById('flashInfo').onclick = () => {
  infoFlashMessage('Info flash message');
};

document.getElementById('flashSuccess').onclick = () => {
  successFlashMessage('Success flash message');
};

document.getElementById('flashWarning').onclick = () => {
  warningFlashMessage('Warning flash message');
};

document.getElementById('flashError').onclick = () => {
  errorFlashMessage('Error flash message');
};
{% endhighlight %}

  <p>
    Now clicking the different buttons should result in different 
    flash messages.
  </p>

  <h2 id="priority" ><a href="#priority">8. Priority</a></h2>

  <p>
    One thing you might have noticed is that each of our flash message 
    creator functions also sets  priority. Views with higher priority (the
    lower the number the bigger the priority) are placed earlier in the
    ViewChannels <a href="/api/core/viewchannel/#views" class="underline high">views</a>
    array.
  <p>

  <p>
    At this moment we are not doing anything with this priority, because
    we always append to the <span class="high">flashMessagesContainerEl</span> element.
    To fix this change the <span class="high">append</span> to an <span class="high">insertBefore</span>:
  <p>

{% highlight "js" %}
// Insert before the current item holding the
// index, if that index does not exist provide
// `null` so it is appended to the list.
flashMessagesContainerEl.insertBefore(
  flashMessageEl,
  flashMessagesContainerEl.children[view.index] ?? null
);
{% endhighlight %}

  <p>
    The trick here is that when the <span class="high">insertBefore</span>
    is called with <span class="high">null</span> it appends the 
    element. 
  <p>

  <p>
    The flash messages should now respect their priority. Try click
    the buttons multiple times and see that the error message is 
    always on top.
  <p>

  <h2 id="autodismiss" ><a href="#autodismiss">9. AutoDismiss</a></h2>

  <p>
    We want the flash messages to dismiss automatically after a certain duration,
    luckily this is just a config change. Change the flash message creator 
    functions to this:
  </p>

{% highlight "js" %}
export function infoFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'info'
    },
    priority: 4,
    autoDismiss: {
      duration: 2000,
      result: undefined
    }
  });
}

export function warningFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'warning'
    },
    priority: 1,
    autoDismiss: {
      duration: 3000,
      result: undefined
    }
  });
}

export function errorFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'error'
    },
    priority: 0,
    autoDismiss: {
      duration: 5000,
      result: undefined
    }
  });
}

export function successFlashMessage(text) {
  flashMessageChannel.present({
    data: {
      id: Math.random(),
      text,
      type: 'success'
    },
    priority: 2,
    autoDismiss: {
      duration: 2000,
      result: undefined
    }
  });
}
{% endhighlight%}

  <p>
    The flash messages should now remove after the configured duration.
  </p>

  <p>
    One thing worth discussing is that we set the 
    <span class='high'>result</span> to <span class='high'>undefined</span>.
    Each view inside of the ViewChannel will have a result, which is a
    promise. This result can be anything, a boolean for a confirmation
    dialog, a string when selecting something from a modal etc etc.
  </p>

  <p>
    When using <a href="/api/core/viewchannelviewautodismiss/" class="high underscore">autoDismiss</a> 
    you must provide the value, via the <span class='high'>result</span>, 
    to resolve the promise with when the auto dismiss is triggered.
  </p>

  <p>
    In our case flash messages do not really have a result, so setting it to 
    <span class='high'>undefined</span> is fine.
  </p>

  <h2 id="animation" ><a href="#animation">10. Exit animation</a></h2>

  <p>
    We already have a nice enter animation for the flash message, but 
    no exit animation. To trigger the exit animation we need to add
    the CSS class <span class="high">flash-message-exit</span> to 
    the flash message element.
  </p>

  <p>
    We have a problem however: adding CSS class to an element which 
    is no longer in the DOM / screen is futile, you cannot animate
    what you cannot see. What we need to do instead is trigger the 
    exit animation, and after the animation is complete only then 
    remove the element from the DOM. Like so:
  </p>

{% highlight "js" %}
if (event.type === 'DISMISSED') {
  const view = event.view;
  const flash = view.data;

  const flashMessageEl = document.getElementById(flash.id);

  flashMessageEl.classList.add('flash-message-exit');

  flashMessageEl.onanimationend = (event) => {
    if (event.animationName === 'slide-out') {
      flashMessageEl.remove();
    }
  };

  return;
}
{% endhighlight %}

  <h2 id="playpause" ><a href="#playpause">11. Play & pause</a></h2>

  <p>
    One thing about flash messages being automatically dismissed is that you
    might not have time to read them. So it would be nice if we paused
    the auto dismiss when hovering over the flash message. We can
    do this via <a href="/api/core/viewchannelview/#play" class="underline high">play()</a>
    and <a href="/api/core/viewchannelview/#pause" class="underline high">pause()</a>.
  </p>

  <p>
    Add the following code below the <span class="high">flashMessageEl.onclick</span> in the
    handling of the <span class="high">"PRESENTED"</span> event:
  </p>

{% highlight "js" %}
flashMessageEl.onmouseover = () => view.pause();
flashMessageEl.onmouseleave = () => view.play();
{% endhighlight %}
 
  <p>
    This works but it is missing something, a progress bar animation.
    Add the following code after the <span class="high">insertBefore</span>:
  </p>

{% highlight "js" %}
const progressEl = document.getElementById(`${flashMessage.id}-progress`);
progressEl.style.animation = `progress ${view.autoDismiss.duration}ms ease-out`;
{% endhighlight %}

  <p>
    Now the user also gets a sense for how long the flash message will 
    stay visible.
  </p>

  <h2 id="what-you-have-learned" ><a href="#what-you-have-learned">12. What you have learned</a></h2>

  <ol class="list-decimal m-2 mb-4">
    <li class="ml-8 mb-4">
      That the <span class="high">subscriber</span> receives all events 
      that take place on the ViewChannel, and that in the subscriber you
      must sync the DOM with what occurred.
    </li>
    <li class="ml-8 mb-4">
      That each <a href="/api/core/viewchannelview/" class="underline high">ViewChannelView</a>
      has a priority inside of the <a href="/api/core/viewchannel/" class="underline high">ViewChannel</a>
      and that higher priority views are earlier inside of the views array.
    </li>
    <li class="ml-8 mb-4">
      That each <a href="/api/core/viewchannelview/" class="underline high">ViewChannelView</a>
      has a result, which is a promise, allowing a view to have some sort of result.
      For example a boolean value for a confirmation dialog.
    </li>
    <li class="ml-8 mb-4">
      That <span class="high">autoDismiss</span> allows us to dismiss
      views automatically after configured interval.
    </li>
    <li class="ml-8 mb-4">
      That we can play and pause the <span class="high">autoDismiss</span>.
    </li>
  </ol>

  <h2 id="further-reading" ><a href="#further-reading">13. Further reading</a></h2>

  <ol class="list-decimal m-2 mb-4">
    <li class="ml-8 mb-4">
      Read through the API of the  <a href="/api/core/viewchannel/" class="underline high">ViewChannel</a>.
    </li>
    <li class="ml-8 mb-4">
      View the API for the <a href="/api/core/viewchannelview/" class="underline high">ViewChannelView</a>.
      Most often you will work As it often provides the most convenient API for mutating the ActiveList.
    </li>
     <li class="ml-8 mb-4">
      Take a look and contrast the approach here with the 
      <a target="_blank" rel="noopener noreferrer" href="https://codesandbox.io/s/viewchannel-vue-pth0sr?file=/src/components/flash-message/FlashMessageViewChannel.vue" class="underline text-purple-600">Vue version</a> 
      of the flash messages. Which does not have a subscriber callback, 
      because Vue handles the DOM manipulation.
    </li>
  </ol>

   <a 
    class="card" 
    href="/docs/view-channel/usage-with-frameworks/"
  >
    <div>
      <div class="text-normal font-medium mb-1">Usage with Frameworks</div>
      <div class="text-sm">Learn how to use the ViewChannel in combination with frameworks such as Angular and Vue.</div>
    </div>
    <svg class="w-4 h-4 fill-current text-blue-600 shrink-0 ml-6" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
      <path d="M9.3 14.7l-1.4-1.4L12.2 9H0V7h12.2L7.9 2.7l1.4-1.4L16 8z"></path>
    </svg>
  </a>
</article>