---
title: Concepts | ActiveList | Docs
layout: layouts/docs.njk
permalink: /docs/active-list/concepts/
parent: 'active-list'
current: 'active-list-concepts'
description: "Provides a conceptual overview of the ActiveList component from the uiloos library. The ActiveList can be used to create carousels, tabs and sortable lists."
keywords: "ActiveList concept, ActiveList overview, ActiveList use-cases, auto playing carousel, circular carousel, cooldown event"
---

<script src="/assets/active-list-concepts.js" defer="true"></script>

<article>
  <h1>ActiveList Concepts</h1>

  <nav class="2xl:fixed 2xl:top-24 2xl:right-2 2xl:w-[270px]" role="doc-toc">
    <em>Table of contents</em>
    <ol class="list-decimal m-2 mb-4">
      <li class="ml-8">
        <a href="#overview" class="text-purple-600 underline">Overview</a>
      </li>
      <li class="ml-8">
        <a href="#initialization" class="text-purple-600 underline">Initialization</a>
      </li>
      <li class="ml-8">
        <a href="#live-properties" class="text-purple-600 underline">Live properties</a>
      </li>
      <li class="ml-8">
        <a href="#multiple-or-single" class="text-purple-600 underline">Multiple or single mode</a>
      </li>
      <li class="ml-8">
        <a href="#circular-or-linear" class="text-purple-600 underline">Circular or linear mode</a>
      </li>
      <li class="ml-8">
        <a href="#direction" class="text-purple-600 underline">Direction</a>
      </li>
      <li class="ml-8">
        <a href="#cooldown" class="text-purple-600 underline">Cooldown</a>
      </li>
      <li class="ml-8">
        <a href="#autoplay" class="text-purple-600 underline">AutoPlay</a>
      </li>
      <li class="ml-8">
        <a href="#history" class="text-purple-600 underline">History</a>
      </li>
    </ol>
  </nav>

  <h2 id="overview">
    <a href="#overview">1. Overview</a>
  </h2>

  <p>
    The <a href="/api/core/activelist/" class="underline high">ActiveList</a> 
    is a component that can represent a large number of user interface 
    elements. Here are some examples:
  </p>

  {% include './concepts/tabs/tabs.njk' %}
  {% include './concepts/segment/segment.njk' %}
  {% include './concepts/accordion/accordion.njk' %}
  {% include './concepts/carousel/carousel.njk' %}
  {% include './concepts/sortable/sortable.njk' %}
  {% include './concepts/gallery/gallery.njk' %}

  <p>
    All of these UI elements share one thing in common: there is 
    this notion of items / content being either <b>active</b>
    or <b>inactive</b>.
  </p>

  <p>
    The <a href="/api/core/activelist/" class="underline high">ActiveList</a> 
    provides a host of methods to manipulate the contents inside of the 
    list. Ranging from insertion, removal, to moving and swapping items, 
    but also activating and deactivating items. 
  </p>

  <p>
    <b>
      The most important things to know is that the ActiveList will 
      always keep track of the active items, no matter how you manipulate
      it.
    </b>
  </p>

  <p>
    If you move an active item, it will remain active. If you insert
    new items the old active item(s) will stay active. If you swap
    an item it will remain active if it is active. Etc etc 
  </p>

  <p>
    An ActiveList contains items / values. These can be whatever you 
    want them to be, references to DOM elements, an object, strings, 
    numbers, booleans you name it.
  </p>

  <p>
    Each item in the <span class="high">ActiveList</span> is wrapped in
    an <a href="/api/core/activelistcontent/" class="underline high">ActiveListContent</a>.
  </p>

  <p>
    An ActiveListContent knows things like: whether it is currently 
    active or not, whether it is the first item or the last item in 
    the ActiveList, if there is an item next or before it.
  </p>

  <p>
    An <a href="/api/core/activelistcontent/" class="underline high">ActiveListContent</a>
    also has methods so it can move / swap / remove / activate itself. 
  </p>

  <h2 id="initialization" >
    <a href="#initialization">2. Initialization</a>
  </h2>

  <p>
    The ActiveList can be initialized by calling the <a href="/api/core/activelist/#constructor" class="high underline">constructor</a>.
    The constructor takes two arguments the <a href="/api/core/activelistconfig/" class="high underline">config</a>
    and an optional <a href="/api/core/activelistsubscriber/" class="high underline">subscriber</a>
  </p>

  <p>
    The <a href="/api/core/activelistconfig/" class="high underline">config</a>
    allows for the ActiveList to be tuned to the use case. In the next sections
    we dive deeper into what can be configured.
  </p>

  <p>
    The second argument is an optional <a href="/api/core/activelistsubscriber/" class="high underline">subscriber</a>,
    the subscriber is a callback function, allowing you to observe changes 
    of the ActiveList. When using vanilla JavaScript the callback is the place
    to perform any DOM manipulations. The callback receives the <a href="/api/core/activelistevent/" class="high underline">event</a>
    that occurred so you can act on it.
  </p>

  <p>
    When using reactive frameworks such as React, Vue, Angular or Svelte etc etc. 
    The subscriber is not necessary since your framework of choice will do the 
    heavy lifting of syncing the state of the ActiveList with the DOM. For more information see 
    <a href="/docs/active-list/usage-with-frameworks/" class="underline">"Usage with Framework"</a>
  </p>

  {% include './concepts/initialization.njk' %}

  <h2 id="live-properties" >
    <a href="#live-properties">3. Live properties</a>
  </h2>

  <p>
    The ActiveList tracks the status of itself in "live" properties. 
    These live properties will sync automatically whenever you perform an 
    action (call a method) of the ActiveList, such as removal / activation 
    or insertion.
  </p>

  <p>
    In other words: each time you call a method to alter the ActiveList,
    all "live" properties will have been updated to reflect the current 
    status. 
  </p>

  <ol class="list-decimal m-2 mb-4">
    <li class="ml-8 mb-4">
      <span class="high">contents</span> which contains all ActiveListContent's
      currently in the ActiveList. If you ever need to loop over the entire
      ActiveList this is the property to loop over.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">activeContents</span>, an array, which contains only the
      active ActiveListContent's.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">activeIndexes</span>, also an array, but this time it
      contains only the active indexes, which are numbers.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">active</span>, another array, it contains all active
      "values". So it basically like <span class="high">activeContents</span>
      except it is unboxed.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">lastActivatedContent</span> contains the last activated
      ActiveListContent. Is <span class="high">null</span> if no item is
      activated.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">lastActivated</span> contains the last activated value,
      is basically the same a <span class="high">lastActivatedContent</span> but
      unboxed. Is <span class="high">null</span> if no item is activated.
    </li>

    <li class="ml-8 mb-4">
      <span class="high">lastActivatedIndex</span> the last index which was
      activated. Is <span class="high">-1</span> if no item is activated. The
      <span class="high">lastActivatedIndex</span> determines which
      <a href="/api/core/activelistcontent/" class="underline high"
        >ActiveListContent</a
      >
      is considered <span class="high">next</span> and
      <span class="high">previous</span>. It also determines the
      <span class="high">direction</span> of the ActiveList.
    </li>
     <li class="ml-8 mb-4">
      <span class="high">lastDeactivatedContent</span> contains the last deactivated
      ActiveListContent. Is <span class="high">null</span> if no item was
      deactivated.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">lastDeactivated</span> contains the last deactivated value,
      is basically the same a <span class="high">lastDeactivatedContent</span> but
      unboxed. Is <span class="high">null</span> if no item was deactivated.
    </li>

    <li class="ml-8 mb-4">
      <span class="high">lastDeactivatedIndex</span> the last index which was
      deactivated. Is <span class="high">-1</span> if no item was deactivated.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">direction</span> is a string telling which 
      direction the ActiveList moved to on it last activation. See
      <a href="/docs/active-list/concepts/#direction" class="underline">Direction</a> 
      for more information.
    </li>
     <li class="ml-8 mb-4">
      <span class="high">oppositeDirection</span> is a string which 
      always has opposite value of the current <span class="high">direction</span>.
    </li>
    <li class="ml-8 mb-4">
      <span class="high">autoPlay</span> whether or not the 
      AutoPlay is currently playing, and at what duration. See
      <a href="/docs/active-list/concepts/#autoplay" class="underline">AutoPlay</a> 
      for more information.
    </li>
  </ol>

  <h2 id="multiple-or-single" >
    <a href="#multiple-or-single">4. Multiple or single mode</a>
  </h2>

  <p>
    The ActiveList be configured to allow multiple items to be active the same
    time, a specific number of items, or only one item.
  </p>

  <p>
    The ActiveListConfig has a property called
    <a href="/api/core/activelistconfig/#maxActivationLimit" class="high underscore"
      >maxActivationLimit</a> it determines how many items can
    be active at the same time. By default it is set to
    <span class="high">1</span> meaning that only one item can be activated at a
    time. When you set <span class="high">maxActivationLimit</span> to 
    <span class="high">1</span> the ActiveList is
    considered to be in <span class="high">single</span> mode.
  </p>

  <p>
    When in <span class="high">single</span> mode, the
    <span class="high">lastActivatedContent</span>,
    <span class="high">lastActivated</span> and
    <span class="high">lastActivatedIndex</span>
    will always refer to the current active item.
  </p>

  <p>
    When <span class="high">maxActivationLimit</span> is set to
    <span class="high">false</span>
    there is no limit to the items which an be activated.
  </p>

  <p>
    When the <span class="high">maxActivationLimit</span> is set to a specific
    number, it will be limited to that amount. So you could set it to
    <span class="high">3</span> and allow only three items to be active at the
    same time.
  </p>

  <p>
    When you set <span class="high">maxActivationLimit</span> to 
    <span class="high">false</span> or a number greater than
    one, the ActiveList is considered to be in
    <span class="high">multiple</span> mode.
  </p>

  <h2 id="circular-or-linear" >
    <a href="#circular-or-linear">5. Circular or linear mode</a>
  </h2>

  <p>
    The ActiveList is by default <span class="high">linear</span>, meaning that it
    has a start and an finish.
  </p>

  <p>
    By setting <a href="/api/core/activelistconfig/#isCircular" class="high underscore"
      >isCircular</a> to
    <span class="high">true</span> the ActiveList becomes
    <span class="high">circular</span>. When circular the
    <span class="high">next</span> and <span class="high">previous</span>
    will wrap around.
  </p>

  <p>
    When the ActiveList is on the last index and
    <span class="high">next()</span> is called it will activate the first item. When
    the ActiveList is on the first index and
    <span class="high">previous()</span> is called it will activate the last item.
  </p>

  <p>
    When isCircular is true each
    <a href="/api/core/activelistcontent/" class="underline high"
      >ActiveListContent</a
    >
    will never have the properties <span class="high">isLast</span> and
    <span class="high">isFirst</span> set to <span class="high">true</span>,
    because there is no start and finish.
  </p>

  <p>
    Is circular is useful when making carousels which you want to 
    loop over the content indefinitely.
  </p>

  <h2 id="direction" >
    <a href="#direction">6. Direction</a>
  </h2>

  <p>
    The ActiveList has a property called 
    <a href="/api/core/activelist/#direction" class="high underscore">direction</a> 
    it holds the direction the ActiveList moved to when an
    <a href="/api/core/activelistcontent/" class="underline high">ActiveListContent</a>
    is activated or deactivated.
  </p>

  <p>
    The <span class="high">direction</span> is useful for triggering 
    different animations based on movement.
  </p>

  <p>
    The direction can either be <span class="high">previous</span> or
    <span class="high">next</span>. Each direction is assigned a
    <span class="high">string</span> value, by default
    <span class="high">previous</span> is assigned <span class="high">"left"</span>,
    and <span class="high">next</span> is assigned
    <span class="high">"right"</span>. You can 
    <a href="/api/core/activelistdirection/" class="high underline">configure</a> 
    the values of next and previous as you please.
  </p>

  <p>
    The direction is based on the shortest path from the current
    <span class="high">lastActivatedIndex</span> to the new 
    <span class="high">lastActivatedIndex</span>.
    This means that when the ActiveList is <span class="high">circular</span>
    it might sometimes be quicker to go "previous" than to go "next".
  </p>

  <p>
    If the lastActivatedIndex is <span class="high">-1</span> the direction is
    always considered <span class="high">next</span>. The lastActivatedIndex is
    <span class="high">-1</span> when no content is active.
  </p>

  <p>
    If the ActiveList is <span class="high">circular</span>, and previous or
    next tie, the direction will become <span class="high">next</span>.
  </p>

  <h2 id="cooldown" >
    <a href="#cooldown">7. Cooldown</a>
  </h2>

  <p>
    Sometimes it is useful to prevent many activations / deactivations from
    happening in rapid succession because you want an animation to finish.
  </p>

  <p>
    For this reason a
    <a href="/api/core/activelistcooldownconfig/" class="high underline">cooldown</a> 
     can be configured. When a cooldown is active for a specified number of milliseconds, all other
    action / deactivation calls are simply ignored.
  </p>

  <p>
    A <span class="high">cooldown</span> can be configured globally 
    (per ActiveList instance), or passed in via options to each activation /
    deactivation method. When both are present the cooldown from the method's
    options takes precedence.
  </p>

  <p>
    A <span class="high">cooldown</span> can either be a number or a
    <a href="/api/core/activelistcooldowndurationcallback/" class="high underscore">callback function.</a>
    Via a callback function it is possible to set a cooldown based on 
    the <span class="high">ActiveListContent</span>. This allows each
    content to have its own cooldown duration.
  </p>

  <p>
    A cooldown is only checked when the action came from a end-user. This is
    determined by the
    <a href="/api/core/activelistactivationoptions/" class="high underscore"
      >ActiveListActivationOptions</a
    >'s <span class="high">isUserInteraction</span> boolean. Whenever the boolean
    is set to <span class="high">false</span>, the cooldown is ignored.
  </p>

  <h2 id="autoplay" >
    <a href="#autoplay">8. AutoPlay</a>
  </h2>

  <p>
    An ActiveList can be put into <span class="high">AutoPlay</span> mode, 
    this means that it will move through the ActiveList by calling
    <span class="high">next()</span> at a
    <a href="/api/core/activelistautoplayconfig/" class="high underscore"
      >configured</a
    >
    duration.
  </p>

  <p>
    The AutoPlay will automatically stop when the end of the contents
    are reached, unless when the ActiveList has <span class="high">isCircular</span>
    set to <span class="high">true</span>, in this case it will
    restart from the first content. Allowing for an infinitely playing
    ActiveList, which can be useful in a carousel.
  </p>

  <p>
    The duration can either be set globally (per ActiveList instance) 
    to a specific number, or a
    <a
      href="/api/core/activelistautoplaydurationcallback/"
      class="high underscore"
      >callback function</a
    >
    based on the ActiveListContent, meaning you can set a duration for each slide
    in a carousel for example.
  </p>

  <p>
    The ActiveList can be paused via <span class="high">pause()</span> and then
    resumed again via <span class="high">play()</span>. When resumed it will take
    into account the duration that had already passed. For example: if the duration
    is 1000 milliseconds, and the user pauses after 800 milliseconds, when resumed the
    item will stay active for another 200 milliseconds. This is because
    there was 200 milliseconds remaining for the duration.
  </p>

  <p>
    The ActiveList can also be stopped via <span class="high">stop()</span>. The
    difference between <span class="high">stop()</span> and 
    <span class="high">pause()</span>, is that when
    <span class="high">play()</span> is called after 
    <span class="high">stop()</span> the duration is reset. 
    For example: if the duration is 500 milliseconds, and the user stops after 
    250 milliseconds, when play is called, the item will stay active 
    for 1000 milliseconds. This is because the duration is reset 
    and not remembered.
  </p>

  <p>
    The autoPlay can be configured to stop on any
    <bold>user interaction</bold> via the
    <a href="/api/core/activelistautoplayconfig/#stopsOnUserInteraction" class="high underscore">stopsOnUserInteraction</a> 
    configuration. When set to <span class="high">true</span> is will
    stop the autoPlay, when set to <span class="high">false</span> (the default)
    it will debounce instead. Meaning that if the duration is set to 2000
    milliseconds, and the user presses "next" after 1999 milliseconds,
    that the next item will be active for 2000 milliseconds, and not
    1 milliseconds. In effect the "duration" has been reset for the
    next slide.
  </p>

  <p>
    Diving a little bit deeper into "user" interaction:
    each time a activation / deactivation method 
    is called you can configure if it is a user interaction or not.
    By default all activation / deactivation calls have their 
    <a href="/api/core/activelistactivationoptions/#isUserInteraction" class="high underscore">isUserInteraction</a> 
    configuration set to <span class="high">true</span>.
  </p>

  <p>
    AutoPlay ignores any cooldown which might be active, as a cooldown is 
    not considered a <span class="high">isUserInteraction</span>. 
    Meaning that if you set a cooldown duration higher than the 
    autoPlay duration, the autoPlay will still keep playing, and ignores
    the cooldown.
  </p>

  <p>
    IMPORTANT: the autoPlay cannot be started without at least one active
    <span class="high">ActiveListContent</span>. This is because the 
    autoPlay activates the "next" content, without any current active
    items there is no next item.
  </p>

  <p class="note">
    That autoPlay will stop if all content is removed whilst the ActiveList is
    playing.
  </p>

  <h2 id="history" >
    <a href="#history">9. History</a>
  </h2>

  <p>
    The ActiveList can keep track of all
    <a href="/api/core/activelistevent/" class="high underline">events</a> that
    occurred, by default is it
    <a href="/api/core/activelistconfig/#keepHistoryFor" class="high underline"
      >configured</a
    >
    not to keep any history.
  </p>

  <p>
    When you set
    <a href="/api/core/activelistconfig/#keepHistoryFor" class="high underline"
      >keepHistoryFor</a
    >
    to a number, the ActiveList will make sure the
    <span class="high">history</span>
    array will never exceed that size.
  </p>

  <p>
    If the size is exceeded the oldest event is removed to make place for the new
    event. This is based on the first in first out principle.
  </p>

  <a
    class="card"
    href="/docs/active-list/tutorial/"
  >
    <div>
      <div class="text-normal font-medium mb-1">Tutorials</div>
      <div class="text-sm">Learn how to use the ActiveList</div>
    </div>
    <svg
      class="w-4 h-4 fill-current text-blue-600 shrink-0 ml-6"
      viewBox="0 0 16 16"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M9.3 14.7l-1.4-1.4L12.2 9H0V7h12.2L7.9 2.7l1.4-1.4L16 8z"></path>
    </svg>
  </a>

</article>