---
title: Basic Carousel | Tutorials | ActiveList | Docs
layout: layouts/docs.njk
permalink: /docs/active-list/tutorials/basic-carousel/
parent: 'active-list'
current: 'active-list-tutorial'
description: "Tutorial which teaches you how to create a carousel component using the ActiveList from uiloos"
keywords: "ActiveList tutorial, ActiveList basic carousel tutorial"
---

<article>
  <h1>ActiveList basic carousel tutorial</h1>

  <nav class="2xl:fixed 2xl:top-24 2xl:right-2 2xl:w-[270px]" role="doc-toc">
    <em>Table of contents</em>
    <ol class="list-decimal m-2 mb-4">
      <li class="ml-8">
        <a href="#introduction" class="text-purple-600 underline">Introduction</a>
      </li>
      <li class="ml-8">
        <a href="#files-overview" class="text-purple-600 underline">Files overview</a>
      </li>
      <li class="ml-8">
        <a href="#goals" class="text-purple-600 underline">Goals</a>
      </li>
      <li class="ml-8">
        <a href="#creating-the-carousel" class="text-purple-600 underline">Creating the carousel</a>
      </li>
      <li class="ml-8">
        <a href="#animating-the-slides" class="text-purple-600 underline">Animating the slides</a>
      </li>
      <li class="ml-8">
        <a href="#animating-progress" class="text-purple-600 underline">Animating progress</a>
      </li>
      <li class="ml-8">
        <a href="#adding-a-cooldown" class="text-purple-600 underline">Adding a cooldown</a>
      </li>
      <li class="ml-8">
        <a href="#stopping-on-interaction" class="text-purple-600 underline">Stopping on interaction</a>
      </li>
      <li class="ml-8">
        <a href="#pause-on-hover" class="text-purple-600 underline">Pause on hover</a>
      </li>
      <li class="ml-8">
        <a href="#what-you-have-learned" class="text-purple-600 underline">What you have learned</a>
      </li>
      <li class="ml-8">
        <a href="#further-reading" class="text-purple-600 underline">Further reading</a>
      </li>
       <li class="ml-8">
        <a href="#full-code" class="text-purple-600 underline">Full code</a>
      </li>
    </ol>
  </nav>

  <section>
    <h2 id="introduction" ><a href="#introduction">1. Introduction</a></h2>

    <p>
      In this tutorial we are going to build a Carousel using vanilla
      JavaScript without using any framework. A carousel is a nice
      component to build as it encompasses almost everything the 
      <a href="/api/core/activelist/" class="underline high">ActiveList</a>
      has to offer.
    </p>

    <p class="note">
      That we are using vanilla JavaScript which requires us to
      write our own DOM manipulation inside of a subscriber. When using
      a reactive framework such as Svelte or Vue, this is not necessary,
      as these frameworks handle synchronizing with the DOM for us.
      See <a class="underline" href="/docs/active-list/usage-with-frameworks/">Usage with Frameworks</a>
      for more information.
    </p>

    <p>
      To get started with the tutorial open and fork this 
      <a target="_blank" rel="noopener noreferrer" href="https://codesandbox.io/s/carousel-starter-vanilla-wtojsg" class="underline text-purple-600">sandbox</a>.
      By using the sandbox you do not have to worry to much about setting
      up an entire development environment.
    </p>

    <h2 id="files-overview" ><a href="#files-overview">2. Files overview</a></h2>

    <p>
      In the sandbox you will see a couple of files:
    </p>

    <ol class="list-disc m-2 mb-4">
      <li class="ml-8 mb-4">
        <span class="high">carousel.css</span> it contains all styling, and the animations
        for the carousel.
      </li>
      <li class="ml-8 mb-4">
        <span class="high">index.html</span> contains the HTML for the carousel, which 
        is currently static, but we will bring it to life. It also
        includes "uiloos" from the UNPKG cdn.
      </li>
      <li class="ml-8">
        <span class="high">carousel.js</span> in this empty file we are going to bring
        the carousel to life.
      </li>
    </ol>
  </section>

  <section>
    <h2 id="goals" ><a href="#goals">3. Goals</a></h2>

    <p>
      We want our carousel to do the following things:
    </p>

    <ol class="list-decimal m-2 mb-4">
      <li class="ml-8 mb-4">
        It should automatically move to the next slide after a certain
        delay. With animations based on the direction so it looks nice.
      </li>
      <li class="ml-8 mb-4">
        Have previous and next slide buttons so the users can control
        the carousel manually.
      </li>
      <li class="ml-8 mb-4">
        A progress indicator so the user has a sense of the position within the carousel.
      </li>
      <li class="ml-8">
        A way to directly activate a slide, without having to click
        the next and previous buttons multiple times.
      </li>
    </ol>
  </section>

  <section>
    <h2 id="creating-the-carousel" ><a href="#creating-the-carousel">4. Creating the carousel</a></h2>

    <p>
      The slides are contained in a <span class="high">ul</span> HTML element, 
      where each <span class="high">li</span> is a slide. A  
      <span class="high">slide</span> has the following HTML structure:
    </p>

  {% highlight "html" %}
<li id="carousel-slide-0" class="slide active">
  <img
  width="1920"
  height="1280"
  src="/images/snow.jpg"
  alt="image of a snow owl"
/>
  <article>
    <h4>Snow owl</h4>
    <p>
      The snowy owl (Bubo scandiacus), etc etc
    </p>

    <p>
      Photo by
      <a
        href="https://unsplash.com/@dkphotos"
        target="_blank"
        rel="noopener noreferrer"
      >
        Doug Kelley
      </a>
    </p>
  </article>
</li>
  {% endhighlight %}

    <p>
      The most important part for us is the <span class="high">class</span> attribute 
      of the <span class="high">li</span>:
    </p>

  {% highlight "html" %}
  <li id="carousel-slide-0" class="slide active">
    {% endhighlight %}

    <p>
    The CSS class triggers the animations, and determines which slide is
    visible at the moment. When the slide is given the class <span class="high">active</span>
    it is the current visible active slide.
  </p>

    <p>
    To get the carousel to work we must first initialize an <span class="high">ActiveList</span>.
  </p>

    {% highlight "javascript" %}
// carousel.js

// First get all slides
const slideEls = Array.from(
  document.querySelectorAll(".slide")
);

// Then to represent the contents of the ActiveList turn the 
// slideEls into an array of numbers. This makes it easier 
// to get the corresponding progress button when a slide is 
// activated.
const slides = slideEls.map((e, index) => index);

/* 
  Because we use the UNPKG variant the ActiveList 
  module is available under the "uiloosActiveList" variable.
*/
const carousel = new window.uiloosActiveList.ActiveList(
  {
    contents: slides,
    activeIndexes: slides[0],
  },
  new window.uiloosActiveList.createActiveListSubscriber({
    // Empty for now
  })
);
  {% endhighlight %}

    <p>
      The <span class="high">contents</span> of the ActiveListConfig determines how many items 
      there are in the ActiveList. What you put into the contents is 
      your own choice, it can be a complex object, a DOM element reference,
      or as in our case a simple number.
    </p>

    <p>
      We choose a number here because each <span class="high">li</span> has a unique id of which is 
      formatted like: <span class="high">carousel-slide-${number}</span>.
      This allow us to identify the slide and corresponding progress later. 
    </p>

      <p>
      Next lets add an <a href="/api/core/activelistautoplayconfig/" class="high underline">autoPlay</a> so the carousel automatically moves 
      to the next active slide, and also lets flesh out the subscriber
      to make it work:
    </p>

    {% highlight "javascript" %}
const carousel = new window.uiloosActiveList.ActiveList(
  {
    contents: slides,
    activeIndexes: slides[0],
    
    // After 5 seconds go to the next slide
    autoPlay: {
      duration: 5000
    }
  },
  new window.uiloosActiveList.createActiveListSubscriber({
    onActivated(event, carousel) {
      // Get a reference to the activated slide <li>.
      const activatedSlide = document.getElementById(
        `carousel-slide-${carousel.lastActivated}`
      );

      // Make the active slide active.
      activatedSlide.classList.add("active");

      // Get a reference to the deactivated slide <li>.
      const deactivatedSlide = document.getElementById(
        `carousel-slide-${carousel.lastDeactivated}`
      );

      // Deactivate the deactivated slide
      deactivatedSlide.classList.remove("active");
    }
  })
);
  {% endhighlight %}

    <p>
      The job of the subscriber is to listen to changes in the ActiveList,
      and synchronize these changes with the DOM. When using vanilla JavaScript
      you are required to write these DOM manipulations manually, when 
      using a framework such as React, Vue, Svelte etc etc you do not
      need to do this yourself.
    </p>

    <p>
      The <a href="/api/core/createactivelistsubscriber/" class="high underline">createActiveListSubscriber</a> allows you to listen to events, 
      in our case "onActivated" which is fired whenever a content of 
      an ActiveList is activated via a 
      <a href="/api/core/activelistactivatedevent/" class="underline high">ActiveListActivatedEvent</a>. 
    </p>

    <p>
    You might notice that the autoPlay will stop at the last slide, this
    is because autoPlay will stop when the end of the list is reached.
    To make things a little nicer we are going to tell the ActiveList
    that it never ends, by setting <a class="underline high" href="/api/core/activelistconfig/#iscircular">isCircular</a>
    to <span class="high">true</span>.
  </p>

    {% highlight "javascript" %}
// carousel.js

const carousel = new window.uiloosActiveList.ActiveList(
  {
    contents: slides,
    activeIndexes: slides[0],
    
    // After 5 seconds go to the next slide
    autoPlay: {
      duration: 5000
    },

    /* 
      This ActiveList is a circle, this means that the autoPlay
      will wrap around back to the beginning when moving past the 
      final slide
    */
    isCircular: true
  },
  // Subscriber is still the same
};

  {% endhighlight %}

    <p>
      Now that the carousel is spinning in circles, lets fix the 
      progress indicators next, as currently the first slide stays
      active (purple). Change <span class="high">onActivated</span> to:
    </p>

    {% highlight "javascript" %}
onActivated(event, carousel) {
  // Get a reference to the activated slide <li>.
  const activatedSlide = document.getElementById(
    `carousel-slide-${carousel.lastActivated}`
  );

  // Make the active slide active.
  activatedSlide.classList.add("active");

  // Get a reference to the activated slide <li>.
  const deactivatedSlide = document.getElementById(
    `carousel-slide-${carousel.lastDeactivated}`
  );

  // reset the className and set it to slide
  deactivatedSlide.classList.remove("active");

  // Get a reference to the activated slides progress button
  const activatedButton = document.getElementById(
    `carousel-button-${carousel.lastActivated}`
  );

  activatedButton.classList.add("active");

  // Get a reference to the activated slides progress button
  const deactivatedButton = document.getElementById(
    `carousel-button-${carousel.lastDeactivated}`
  );

  deactivatedButton.classList.remove("active");
}
  {% endhighlight %}

    <p>
    Now that the progress button is working, we can now focus on the
    next and previous buttons. We need to use the
    <a href="/api/core/activelist/#activateNext" class="underline high">activateNext</a> and
    <a href="/api/core/activelist/#activatePrevious" class="underline high">activatePrevious</a>
    methods on the ActiveList. These allow us to activate items based on the item which 
    is currently active:
  </p>

    {% highlight "javascript" %}
const carousel = new window.uiloosActiveList.ActiveList(
  // Code stays the same
);

document.getElementById('carousel-next').onclick = () => {
  carousel.activateNext();
};

document.getElementById('carousel-prev').onclick = () => {
  carousel.activatePrevious();
};
  {% endhighlight %}

    <p>
      We grab the buttons through <span class="high">document.getElementById</span> and call the 
      appropriate method. Note that we do not need to worry about the 
      <span class="high">isCircular</span> here, or which content is
      currently active etc etc. This is really powerful instead of writing this logic 
      yourself, you let the ActiveList do the heavy lifting.
    </p>

    <p>
      Next is responding to the progress indicator button clicks:
    </p>

    {% highlight "javascript" %}
// Continued below the snippet above

// When progress buttons are clicked activate the slide.
// the button represents.
slides.forEach((slide) => {
  // Remember: slide is a number.

  const progressButton = document.getElementById(
    `carousel-button-${slide}`
  );
  
  progressButton.onclick = () => {
    carousel.activate(slide);
  };
});
  {% endhighlight %}

    <p>
      An ActiveList can be activated by calling the <a href="/api/core/activelist/#activate" class="underline high">activate</a> method.
      The argument you need to pass to it is the value of what you want to activate. Since in
      our case the <span class="high">contents</span> are numbers (representing the slides)
      a number will do.
    </p>

    <p>
      By now we have a pretty nice working carousel, the only thing missing
      are animations.
    </p>

  </section>

  <section>
    <h2 id="animating-the-slides" ><a href="#animating-the-slides">5. Animating the slides</a></h2>

    <p>
      For the animation we want the old
      slide to animate away, and the new slide to animate in. We want
      the direction of the animation to be based on the position of
      the old and new slide. If the new slide is on the old slides right 
      we want the old slide to slide out via the left and vice versa.
    </p>

    <p>
      The trick is setting the correct CSS classes on our slide <span class="high">li</span>,
      lets change the <span class="high">onActivated</span> again this time to:
    </p>

  {% highlight "javascript" %}
onActivated(event, carousel) {
  // Get a reference to the activated slide <li>.
  const activatedSlide = document.getElementById(
    `carousel-slide-${carousel.lastActivated}`
  );

  // Reset the class name to make it easier to reason about.
  activatedSlide.className = "slide";

  // Request animation frame so the animation
  // is less janky.
  requestAnimationFrame(() => {
    // The ActiveList knows which direction it
    // went, by setting it as the CSS class it
    // will move the newly active slide ofscreen
    // to that position.
    activatedSlide.classList.add(carousel.direction);

    // Now that the new active slide is in position
    // animate it so it takes center stage.
    requestAnimationFrame(() => {
      activatedSlide.classList.add("animate", "active");
    });
  });

  // Get a reference to the activated slide <li>.
  const deactivatedSlide = document.getElementById(
    `carousel-slide-${carousel.lastDeactivated}`
  );

  // Reset the class name to make it easier to reason about.
  deactivatedSlide.className = "slide";

  requestAnimationFrame(() => {
    // Make this slide active so it takes
    // center stage.
    deactivatedSlide.classList.add("active");

    // Frame is so that there is no "white"
    // gap between the slides. By sliding the
    // old active slide slightly later there
    // is always an overlap which looks nicer
    // visually.
    requestAnimationFrame(() => {
      // Make it so it is no longer the active slide.
      deactivatedSlide.classList.remove("active");

      // Now move it to the opposite direction
      // of the carousel so it slides out.
      deactivatedSlide.classList.add("animate", carousel.oppositeDirection);
    });
  });

  // reset the className and set it to slide
  deactivatedSlide.classList.remove("active");

  // Get a reference to the activated slides progress button
  const activatedButton = document.getElementById(
    `carousel-button-${carousel.lastActivated}`
  );

  activatedButton.classList.add("active");

  // Get a reference to the activated slides progress button
  const deactivatedButton = document.getElementById(
    `carousel-button-${carousel.lastDeactivated}`
  );

  deactivatedButton.classList.remove("active");
}
  {% endhighlight %}

    <p>
      As you can see the ActiveList has a property called the 
      <a href="/api/core/activelist/#direction" class="underline high">direction</a> which 
      keeps track of the way the direction the next active item moves to.
      It also has  a property called <a href="/api/core/activelist/#oppositeDirection" class="underline high">oppositeDirection</a> which 
      is always the opposite of the direction property.
    </p>

    <p>
      We use the <a href="/api/core/activelist/#direction" class="underline high">direction</a> to decide 
      from which direction the active slide should come from, and the <a href="/api/core/activelist/#oppositeDirection" class="underline high">oppositeDirection</a> to 
      determine were the previous slide should go to.
    </p>
  </section>

  <section>
    <h2 id="animating-progress" ><a href="#animating-progress">6. Animating progress</a></h2>

    <p>
      It would be nice if the user has an indication of how long a slide is going to take.
      Lets animate the progress buttons to give the user a sense of time. This time
      we are going to need an <span class="high">onInitialized</span> event method:
    </p>

  {% highlight "javascript" %}
onInitialized(event, carousel) {
  // Trigger the animation for the initial active button,
  // then exit.
  const button = document.getElementById(
    `carousel-button-${carousel.lastActivated}`
  );

  button.classList.add("active");
  button.style.animation = `progress ${carousel.autoPlay.duration}ms linear`;
},

onActivated(event, carousel) {
  // Abbreviated for brevity, everything  up 
  // until this part is the same.

  // Start the animation for the active button.
  const activatedButton = document.getElementById(
    `carousel-button-${carousel.lastActivated}`
  );
  activatedButton.classList.add("active");
  activatedButton.style.animation = `progress ${carousel.autoPlay.duration}ms linear`;

  // Remove the animation from the deactivated button
  const deactivatedButton = document.getElementById(
    `carousel-button-${carousel.lastDeactivated}`
  );
  deactivatedButton.className = "";
  deactivatedButton.style.animation = "";
}
  {% endhighlight %}

    <p>
      Now the user has a great indication of how long the carousel will
      stay on the slide!
    </p>

    <h2 id="adding-a-cooldown" ><a href="#adding-a-cooldown">7. Adding a cooldown</a></h2>

    <p>
      When the user clicks on the next or previous buttons really quickly
      multiple animations are triggered at once. This looks very jarring
      so we need to do something about it. Lets add a 
      <a href="/api/core/activelistconfig/#cooldown" class="underline high">cooldown</a>:
    </p>

  {% highlight "javascript" %}
{
  // Below isCircular:

  // Wait 500 milliseconds before allowing another item
  // to be activated.
  cooldown: 500
}
  {% endhighlight %}

    <p>
      By setting a cooldown the ActiveList will not allow any activations within 
      that cooldown period. 
    </p>

    <p>
      Any activation event that is triggered will simply be ignored. That is why 
      we do not need to alter our <span class="high">progressButton.onclick</span> to 
      enable the cooldown.
    </p>
  </section>

  <section>
    <h2 id="stopping-on-interaction" ><a href="#stopping-on-interaction">8. Stopping on interaction</a></h2>

    <p>
      Now I want to stop the carousels auto play whenever the user manually changes the active slide.
      This way the user can assume complete control, luckily for use there is configuration that 
      lets us do this called:
      <a href="/api/core/activelistautoplayconfig/#stopsOnUserInteraction" class="underline high">stopsOnUserInteraction</a>.
      When it is set to <span class="high">true</span> the autoPlay stops whenever an interaction
      came from a user.
    </p>

  {% highlight "javascript" %}
{
  // Change the autoPlay config to:
  
  autoPlay: {
    // After 5 seconds go to the next slide
    duration: 5000,

    // If the user clicks a button stop the autoPlay
    stopsOnUserInteraction: true
  },
};
  {% endhighlight %}

    <p>
      This works because each method on the ActiveList and ActiveListContent
      is by default assumed to be a user interaction. So when we call
      <span class="high">carousel.activate(slide);</span> for example it is 
      considered executed by a human.
    </p>

    <p>
      For more information about how human / computer interactions work see the  <a href="/docs/active-list/concepts/#autoplay" class="underline">AutoPlay section on the concepts</a> page.
    </p>
  </section>

  <section>
    <h2 id="pause-on-hover" ><a href="#pause-on-hover">9. Pause on hover</a></h2>

    <p>
      Next I want the animation to pause whenever the user hovers over the carousel, this way 
      the user can view the images and read the text if they find it interesting.
    </p>

    <p>
      First thing we need to do is pause the carousel on hover:
    </p>

  {% highlight "javascript" %}
// A reference to the carousel <ul> element
const carouselEl = document.getElementById("carousel");

// Disable the carousel when users mouse enters the carousel
carouselEl.addEventListener("mouseenter", () => {
  carousel.pause();
});

// Enable the carousel again when users mouse exits the carousel.
carouselEl.addEventListener("mouseleave", () => {
  // Do not play again if autoPlay was already stopped due to user interaction
  if (!carousel.autoPlay.hasBeenStoppedBefore) {
    carousel.play();
  }
});
  {% endhighlight %}

  <p>
    The <span class="high">hasBeenStoppedBefore</span> lets you know if the
    autoPlay was ever completely stopped. This will become true whenever 
    the user takes control over the carousel by using the buttons to 
    activate a slide.
  </p>

  <p>
    In this scenario I do not want the carousel to start playing again
    if the user hovers out of the carousel.
  </p>

  <p>
    Next we need to actually stop the progress button animation when 
    the carousel is paused and resume when playing again. Lets listen 
    to the paused and playing events:
  </p>

   {% highlight "javascript" %}
// Add these below or above `onActivated`.

onAutoPlayPaused(event, carousel) {
  // Halt the animation when paused
  const progressButton = document.getElementById(
    `carousel-button-${carousel.lastActivated}`
  );

  progressButton.style.animationPlayState = "paused";
},

onAutoPlayPlaying(event, carousel) {
  // Resume animation when playing
  const progressButton = document.getElementById(
    `carousel-button-${carousel.lastActivated}`
  );

  progressButton.style.animationPlayState = "running";
}
  {% endhighlight %}

    <p>
      The trick here is using <span class="high">animationPlayState</span> to control 
      a CSS animation from within JavaScript.
    </p>
  </section>

  <section>
    <h2 id="what-you-have-learned" ><a href="#what-you-have-learned">10. What you have learned</a></h2>

    <ol class="list-decimal m-2 mb-4">
      <li class="ml-8 mb-4">
        That the <span class="high">subscriber</span> receives all events 
        that take place on the ActiveList, and that in the subscriber you
        must sync the DOM with what occurred.
      </li>
      <li class="ml-8 mb-4">
        That via <span class="high">autoPlay</span> we can move through
        the slides programmatically at an interval.
      </li>
      <li class="ml-8 mb-4">
        That via <span class="high">autoPlay</span> can be paused and 
        resumed.
      </li>
      <li class="ml-8 mb-4">
        We can make an ActiveList not have an end and a beginning 
        by setting the <span class="high">isCircular</span> to 
        <span class="high">true</span>.
      </li>
      <li class="ml-8 mb-4">
        That the <span class="high">cooldown</span> property can prevent
        changes to the active item within a time span, so animations
        get a chance to play out.
      </li>
      <li class="ml-8 mb-4">
        That the <span class="high">ActiveList</span> and
        <span class="high">ActiveListContent</span> contain methods
        which can change which content is active.
      </li>
    </ol>
  </section>

  <section>
    <h2 id="further-reading" ><a href="#further-reading">11. Further reading</a></h2>

    <ol class="list-decimal m-2 mb-4">
      <li class="ml-8 mb-4">
        Browse through the API for the <a href="/api/core/activelist/" class="underline high">ActiveList</a>,
        see everything at your disposal.
      </li>
      <li class="ml-8 mb-4">
        Read the API for the <a href="/api/core/activelistcontent/" class="underline high">ActiveListContent</a>.
        As it often provides the most convenient API for mutating the ActiveList.
      </li>
      <li class="ml-8 mb-4">
        For a more modern CSS snap based carousel take a look at this 
        tutorial: <a href="/docs/active-list/tutorials/snap-carousel" class="underline">CSS snap carousel tutorial</a>
      </li>
      <li class="ml-8 mb-4">
        When using vanilla JavaScript you must handle DOM manipulation yourself, 
        contrast this with <a href="/docs/active-list/examples/" class="underline">the examples that use a framework</a>.
      </li>
    </ol>
  </section>

  <section>
    <h2 id="full-code"><a href="#full-code">12. Full code</a></h2>

     <p>
      For reference here is the <a target="_blank" rel="noopener noreferrer" href="https://codesandbox.io/s/activelist-vanilla-xmf5zj?file=/examples/classic-carousel/classic-carousel.js:1630-2151" class="underline text-purple-600">reference implementation of a classic carousel in vanilla JS. </a>
    </p>
  </section>

  <a 
    class="card" 
    href="/docs/active-list/usage-with-frameworks/"
  >
    <div>
      <div class="text-normal font-medium mb-1">Usage with Frameworks</div>
      <div class="text-sm">Learn how to use the ActiveList in combination with frameworks such as React and Vue.</div>
    </div>
    <svg class="w-4 h-4 fill-current text-blue-600 shrink-0 ml-6" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
      <path d="M9.3 14.7l-1.4-1.4L12.2 9H0V7h12.2L7.9 2.7l1.4-1.4L16 8z"></path>
    </svg>
  </a>

</article>